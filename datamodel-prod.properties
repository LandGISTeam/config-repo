server.servlet.context-path=/datamodel-api
spring.application.name=datamodel
server.port=8081

server.tomcat.max-threads=100
server.tomcat.min-spare-threads=10
server.tomcat.accept-count=200


# Disable Eureka client in standalone profile
#eureka.client.enabled=false
#spring.cloud.config.import-check.enabled=false

# Eureka server url
eureka.client.serviceUrl.defaultZone=http://eureka0-service:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.preferIpAddress=true
eureka.instance.lease-expiration-duration-in-seconds=1
eureka.instance.lease-renewal-interval-in-seconds=2

# Keycloak config for a back-end use spring boot 3 like this service that works as a 
# resource server to validate JWT tokens and to secure Rest APIs based extracted roles
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://172.26.1.241:8080/realms/laolis

# DATASOURCE
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://172.26.1.54:5432/laolis
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.initialization-mode=always
spring.datasource.max-active=100
spring.datasource.max-idle=8
spring.datasource.min-idle=8
spring.datasource.initial-size=10
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=true
spring.datasource.test-on-return=false
spring.datasource.test-while-idle=true
spring.datasource.time-between-eviction-runs-millis=3600000
spring.datasource.min-evictable-idle-time-millis=10800000
spring.datasource.platform=postgres
spring.datasource.continue-on-error=true
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

spring.jackson.serialization.fail-on-empty-beans=false

# ======================================
# = Logging
# ======================================
logging.level.org.springframework.web=ERROR
logging.level.com.jdvn.devtech=DEBUG
logging.pattern.file="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"


# REST
spring.data.rest.defaultMediaType=application/json

# HIBERNATE
spring.jpa.database=postgresql
spring.jpa.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
# create, none, validate, update, and create-drop
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.defer-datasource-initialization=true

spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.use_structured_entries=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Change this to your desired storage path
file.upload-dir=./uploads
spring.servlet.multipart.max-file-size=150MB
spring.servlet.multipart.max-request-size=150MB


springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method

spring.servlet.multipart.enabled=true
spring.async.enabled=true